// Generated by BUCKLESCRIPT VERSION 1.9.0, PLEASE EDIT WITH CARE
'use strict';

var Tape     = require("bs-tape/lib/js/src/tape.js");
var Curry    = require("bs-platform/lib/js/curry.js");
var Promise  = require("bs-promise/lib/js/src/promise.js");
var Startapp = require("../src/startapp.js");

function noEff() {
  return /* () */0;
}

Tape.test("should call render once on startup", (function (t) {
        Curry._1(t[/* plan */0], 1);
        Startapp.make(5, (function (_, s) {
                return /* tuple */[
                        s,
                        noEff
                      ];
              }), (function (s, _) {
                return Curry._1(t[/* ok */1], +(s === 5));
              }), /* () */0);
        return /* () */0;
      }));

Tape.test("should update state and rerender on dispatch", (function (t) {
        Curry._1(t[/* plan */0], 2);
        var expected = [5];
        var update = function (action, state) {
          if (action !== 0) {
            return /* tuple */[
                    state,
                    noEff
                  ];
          } else {
            return /* tuple */[
                    state + 1 | 0,
                    noEff
                  ];
          }
        };
        var render = function (state, _) {
          return Curry._1(t[/* ok */1], +(state === expected[0]));
        };
        var dispatch = Startapp.make(5, update, render, /* () */0);
        expected[0] = 6;
        return Curry._1(dispatch, /* Inc */0);
      }));

Tape.test("should call the effect function", (function (t) {
        Curry._1(t[/* plan */0], 3);
        var expected = [5];
        var eff = function (dispatch) {
          return Promise.$$finally(dispatch, dispatch, Promise.resolve(/* Inc */0));
        };
        var update = function (action, state) {
          switch (action) {
            case 0 : 
                return /* tuple */[
                        state + 1 | 0,
                        noEff
                      ];
            case 1 : 
                return /* tuple */[
                        state,
                        eff
                      ];
            case 2 : 
                return /* tuple */[
                        state - 1 | 0,
                        noEff
                      ];
            
          }
        };
        var render = function (state, _) {
          return Curry._1(t[/* ok */1], +(state === expected[0]));
        };
        var dispatch = Startapp.make(5, update, render, /* () */0);
        Curry._1(dispatch, /* IncAsync */1);
        expected[0] = 6;
        return /* () */0;
      }));

exports.noEff = noEff;
/*  Not a pure module */
